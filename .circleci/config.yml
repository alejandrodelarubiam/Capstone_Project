version: 2.1

commands:
  destroy-environment:
    description: Destroy Infrastructure cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name capstoneADLRM-infrastructure-${CIRCLE_WORKFLOW_ID:0:7}
  destroy-kubernetes:
    description: Destroy deployments and services of Kubernetes.
    steps:
      - run:
          name: Destroy kubernetes
          when: on_fail
          command: |
            kubectl delete deployment capstoneadlrm-microservice-${CIRCLE_WORKFLOW_ID:0:7}
            kubectl delete svc capstoneadlrm-microservice-${CIRCLE_WORKFLOW_ID:0:7}
     
jobs:
  linting:
    docker:
      - image: python:3.8.10
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint           

  docker-build:
    docker:
      - image: cimg/go:1.17
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run: |
          TAG=0.1.$CIRCLE_BUILD_NUM
          echo "$TAG" >> .circleci/files/tag.txt
          docker build -t adelarubiam/capstone_adlrm:$TAG .
          echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker push adelarubiam/capstone_adlrm:$TAG
      - persist_to_workspace:
          root: .circleci/files/
          paths:
            - tag.txt
  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploying EKS Cluster and Worker Nodes
          no_output_timeout: 25m
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/infrastructure.yml \
              --capabilities CAPABILITY_NAMED_IAM \
              --tags project=capstoneADLRM \
              --stack-name "capstoneADLRM-infrastructure-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
  deploy-to-eks:
    docker:
      - image: python:3.8.10
    steps:
      - checkout
      - attach_workspace:
          at: .circleci/files/
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mv kubectl /usr/local/bin
      - run:
          name: Install dependencies and AWS CLI
          command: |
            # Installing software-properties-common
            apt-get update
            apt-get install -y software-properties-common
            # Installing awscli
            apt-get install -y python3-pip
            pip3 install awscli
      - run:
          name: Authenticate with EKS
          command: |
            aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name CapstoneADLRM-Cluster-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Deploy to EKS
          command: |
            cd .circleci/files
            TAG=$(cat tag.txt)
            echo "Deploying image with Tag: $TAG"
            kubectl create deployment capstoneadlrm-microservice-${CIRCLE_WORKFLOW_ID:0:7} --image=adelarubiam/capstone_adlrm:$TAG
            kubectl expose deployment capstoneadlrm-microservice-${CIRCLE_WORKFLOW_ID:0:7} --port=8000 --target-port=80 --type=LoadBalancer --name=capstoneadlrm-microservice-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment

  smoke-test:
    docker:
        - image: python:3.8.10
    steps:
      - checkout
      - attach_workspace:
          at: ~/     
      - run:
          name: Install dependencies (curl, kubectl, awscli)
          command: |
            # Install software-properties-common
            apt-get update
            apt-get install -y software-properties-common

            # Install curl
            apt-get update -y
            apt-get install -y curl

            # Install awscli
            apt-get install -y python3-pip
            pip3 install awscli

            # Install kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mv kubectl /usr/local/bin
      # - run:
      #     name: Authenticate with EKS
      #     command: |
      #       aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name CapstoneADLRM-Cluster-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Obtaining URL and performing smoke test.
          command: |
            # URL=$(kubectl get svc capstoneadlrm-microservice-${CIRCLE_WORKFLOW_ID:0:7} -o wide | awk '{print $4}' | tail -n 1)         
            # echo ${URL}:8000 
            # if curl -s ${URL}:8000 | grep "Hello World!"
            # then
            #   exit 0
            # else
            #   exit 1
            # fi
            grep --version
            CIRCLE_WORKFLOW_ID=bef7b59
            aws eks --region us-east-1 update-kubeconfig --name CapstoneADLRM-Cluster-${CIRCLE_WORKFLOW_ID}
            URL=$(kubectl get svc capstoneadlrm-microservice-${CIRCLE_WORKFLOW_ID} -o wide | awk '{print $4}' | tail -n 1)         
            echo ${URL} 
            if curl -s ${URL}:8000 | grep "Hello World!"
            then
              exit 0
            else
              exit 1
            fi   
      # - destroy-kubernetes
      # - destroy-environment
  cleanup:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export TERM=dumb
            # Fetch the stack names 
            # I did it slightly different, listing all stacks, filtering by its parameters and comparing with the current version        
            echo "Current version: ${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            for STACK_NAME in "${STACKS[@]}"; do
            WorkflowID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
            --query 'Stacks[].Parameters[?ParameterKey==`ID`].ParameterValue' --output text)
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "$WorkflowID" ]]
            then
              echo "----------------Delete confirmed------------------------"
              echo "Deleting udapeople-${WorkflowID}"
              echo "Current version is udapeople-${CIRCLE_WORKFLOW_ID:0:7}"            
              aws cloudformation delete-stack --stack-name "$STACK_NAME"
              aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" 
              #Query to check the deleted stacks  
              echo "The following stacks have been deleted successfully:"           
              aws cloudformation list-stacks --query "StackSummaries[?starts_with(StackName, '$STACK_NAME')].StackName" --stack-status-filter DELETE_COMPLETE --no-paginate --output text
            else
              echo "----------------Cannot cleanup, $WorkflowID is current version------------------------"
            fi
            done 
            
workflows:
  default:
    jobs:
      # - linting:
      #     filters:
      #       branches:
      #         only: [master]    
      # - docker-build:
      #     requires: [linting]      
      #     filters:
      #       branches:
      #         only: [master]
      # - deploy-infrastructure:
      #     requires: [docker-build]
      #     filters:
      #       branches:
      #         only: [master] 
      # - deploy-to-eks:
      #     requires: [deploy-infrastructure]
      #     filters:
      #       branches:
      #         only: [master]
      - smoke-test:
          requires: [deploy-to-eks]
          filters:
            branches:
              only: [master]
      - cleanup:
          requires: [smoke-test]
      