version: 2.1
orbs:
#  node: circleci/node:4.1
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name capstoneADLRM-infrastructure-${CIRCLE_WORKFLOW_ID:0:7}
     
jobs:
  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/infrastructure.yml \
              --tags project=capstoneADLRM \
              --stack-name "capstoneADLRM-infrastructure-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[].Instances[].InstanceId" --output text)
            PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "$PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
        - image: python:3.9.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1e:3e:56:c7:80:7f:35:68:2a:e7:26:8d:95:1a:db:89"]    
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            
            # Install software-properties-common
            apt-get update
            apt-get install -y software-properties-common

            # Install tar and gzip
            apt-get update
            apt-get install -y tar gzip
            
            # Install ansible
            apt-get update -y
            apt install ansible -y
            which ansible
            
            # Install awscli
            apt-get install -y python3-pip
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  deploy-frontend:
    docker:
        - image: python:3.9.16
    steps:
      - checkout 
      - run:
          name: Install dependencies (Ansible, Node, Npm, AWS CLI)
          command: |
            # Install software-properties-common
            apt-get update
            apt-get install -y software-properties-common
            
            # Install ansible
            apt-get update -y
            apt install ansible -y
            which ansible
            
            # Install awscli
            apt-get install -y python3-pip
            pip3 install awscli

            # Install Nodejs
            apt-get update -y
            apt-get install -y nodejs

            # Install Npm
            apt-get update -y
            apt-get install -y npm  
      - run:
          name: Get backend url
          command: |
            INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[].Instances[].InstanceId" --output text)
            BACKEND_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" > ~/api_url.txt
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - api_url.txt
      - destroy-environment
      - revert-migrations
   
                    
  deploy-backend:
    docker:
        - image: python:3.9.16    
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1e:3e:56:c7:80:7f:35:68:2a:e7:26:8d:95:1a:db:89"]    
      - attach_workspace:
          at: .circleci/ansible/ 
      - run:
          name: Install dependencies (tar, gzip, ansible, nodejs, and npm)
          command: |
            # Install software-properties-common
            apt-get update
            apt-get install -y software-properties-common

            # Install tar and gzip
            apt-get update
            apt-get install -y tar gzip
            
            # Install ansible
            apt-get update -y
            apt install ansible -y
            which ansible
            
            # Install awscli
            apt-get install -y python3-pip
            pip3 install awscli

            # Install Nodejs
            apt-get update -y
            apt-get install -y nodejs

            # Install Npm
            apt-get update -y
            apt-get install -y npm 
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            ls -a
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
        - image: python:3.9.16 
    steps:
      - checkout
      - attach_workspace:
          at: ~/     
      - run:
          name: Install dependencies (curl, nodejs, npm, awscli)
          command: |
            # Install software-properties-common
            apt-get update
            apt-get install -y software-properties-common

            # Install curl
            apt-get update -y
            apt-get install -y curl

            # Install Nodejs
            apt-get update -y
            apt-get install -y nodejs

            # Install Npm
            apt-get update -y
            apt-get install -y npm 

            # Install awscli
            apt-get install -y python3-pip
            pip3 install awscli
      - run:
          name: Get backend url and Backend smoke test.
          command: |
            export API_URL=$(cat ~/api_url.txt)
            echo "${API_URL}/api/status"
            URL_BACKEND=$(echo "${API_URL}/api/status")
            echo ${URL_BACKEND}
            if curl -s ${URL_BACKEND} | grep "ok"
            then
                exit 0
            else
                exit 1
            fi            
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
        - image: python:3.9.16
    steps:
      - checkout
      - run:
          name: Install dependencies (curl, nodejs, npm, awscli)
          command: |
            # Install software-properties-common
            apt-get update
            apt-get install -y software-properties-common

            # Install curl
            apt-get update -y
            apt-get install -y curl

            # Install Nodejs
            apt-get update -y
            apt-get install -y nodejs

            # Install Npm
            apt-get update -y
            apt-get install -y npm 

            # Install awscli
            apt-get install -y python3-pip
            pip3 install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-${OldWorkflowID}" \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"       
      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export TERM=dumb
            # Fetch the stack names 
            # I did it slightly different, listing all stacks, filtering by its parameters and comparing with the current version        
            # This time, only for submit purporses, I fixed CIRCLE_WORKFLOW_ID in order to keep Stacks of previous delivered URLs
            CIRCLE_WORKFLOW_ID_FIXED=d9f9dec
            echo $CIRCLE_WORKFLOW_ID_FIXED
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            for STACK_NAME in "${STACKS[@]}"; do
            WorkflowID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
            --query 'Stacks[].Parameters[?ParameterKey==`ID`].ParameterValue' --output text)
            if [[ "${CIRCLE_WORKFLOW_ID_FIXED}" != "$WorkflowID" ]]
            then
              echo "----------------Delete confirmed------------------------"
              echo "Deleting udapeople-${WorkflowID}"
              echo "Current version is udapeople-${CIRCLE_WORKFLOW_ID_FIXED}"            
              aws cloudformation delete-stack --stack-name "$STACK_NAME"
              aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" 
              #Ensuring s3 bucket is deleted only when passed backend stack
              if [[ "${STACK_NAME}" =~ "backend" ]]
              then
                aws s3 rb "s3://udapeople-${WorkflowID}" --force
              else
                echo "S3 Bucket already deleted or deleted in following iteration"
              fi
              #Query to check the deleted stacks  
              echo "The following stacks have been deleted successfully:"           
              aws cloudformation list-stacks --query "StackSummaries[?starts_with(StackName, '$STACK_NAME')].StackName" --stack-status-filter DELETE_COMPLETE --no-paginate --output text
            else
              echo "----------------Cannot cleanup, $WorkflowID is current version------------------------"
            fi
            done 
            
workflows:
  default:
    jobs:
      - deploy-infrastructure:
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]   
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [run-migrations]      
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [master]
      - cleanup:
          requires: [cloudfront-update]
      