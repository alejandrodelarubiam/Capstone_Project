Description:
  CapstoneADLRM Infrastructure (Kubernetes and Nodes).

Parameters:
    EnvironmentName:
        Description: Our environment's name, used to import and export infrastructure from other yml files.
        Type: String
        Default: CapstoneADLRM
    ID:
        Description: Unique identifier.
        Type: String
        Default: 01234
    VpcCIDR:
        Description: IP range in CIDR notation for this VPC
        Type: String
        Default: 10.0.0.0/16
    PublicSubnet1CIDR:
        Description: IP range in CIDR notation for this Subnet
        Type: String
        Default: 10.0.0.0/24
    PublicSubnet2CIDR:
        Description: IP range in CIDR notation for this Subnet
        Type: String
        Default: 10.0.1.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
          - Key: name
            Value: !Ref EnvironmentName
  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - Key: Name
                Value: !Ref EnvironmentName
  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC
  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Routes
  DefaultPublicRoute: 
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties: 
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2 
#Creating Public Subnets
  PublicSubnet1: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
  PublicSubnet2: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet2CIDR
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: CapstoneADLRM-SG
      GroupDescription: Allow ports 22, 3030 and 9100.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  EKSClusterIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "myEKSClusterRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "eks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
        - "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"

  EKSNodeIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "myEKSWorkerNodeRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController

  Cluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: "CapstoneADLRM-Cluster"
      RoleArn: !GetAtt EKSClusterIAMRole.Arn
      Version: "1.25"
      ResourcesVpcConfig:
        SecurityGroupIds: 
        - !GetAtt EKSSecurityGroup.GroupId
        SubnetIds: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        EndpointPublicAccess: true   

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: Cluster
    Properties:
      ClusterName: "CapstoneADLRM-Cluster"
      NodegroupName: !Sub "CapstoneADLRM-NodeGroup-${ID}"
      NodeRole: !GetAtt EKSNodeIAMRole.Arn
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      ScalingConfig:
        DesiredSize: 1
        MaxSize: 2
        MinSize: 1
      InstanceTypes:
        - "t2.micro"
      Tags:
        kubernetes.io/cluster/CapstoneADLRM-Cluster : owned